library(shinydashboard)
library(shiny)
library(tidyverse)
library(lubirdate)
clean_tracking <- read_csv("Desktop/PMC Github/Tracking Data/data/clean_tracking.csv")
clean_tracking <- read_csv("clean_tracking.csv")
clean_tracking
View(clean_tracking)
library(tidyverse)
library(readr)
library(readxl)
library(ggplot2)
library(ggthemes)
library(ggvis)
library(plotly)
library(shiny)
library(ggplot2)
library(writexl)
rm(list=ls())
df_rfid <-  read_excel("~/PMC data/PMCRawData_Correct.xlsx") %>% #Tracking Data With Locations
mutate(
date = sub(" .*", "", Time),  # Extract the date part
time = sub("^.* ", "", Time)  # Extract the time part
) %>%
select(-date, -Time) %>%
mutate(Hour = hour(hms(time))) #how granular do we want this to be
df_waterstop <- read_excel("~/PMC data/2023 PMC Weekend Tracking Locations.xlsx",
sheet = "RR12 Timing Points and Results")
#Read in Rider Route info
#Mark whether the route is a 1 day or a 2 day route
Rider_Route_Info <- read_excel("~/PMC data/Rider Route Info.xlsx") %>%
select(eGiftID, `2023 Route...11`) %>%
mutate("Day 1 or Day 2"= case_when(
`2023 Route...11`== "Wellesley to Provincetown Inn (2-Day)" ~ "2 Day",
`2023 Route...11`== "Wellesley to Provincetown Monument (2-Day)"~ "2 Day",
`2023 Route...11` == "Sturbridge to Provincetown Inn (2-Day)"~ "2 Day",
`2023 Route...11`== "Sturbridge to Provincetown Monument (2-Day)"~ "2 Day",
`2023 Route...11` == "Wellesley to Bourne + Wellesley to Wellesley"~ "2 Day",
`2023 Route...11` == "Sturbridge to Bourne + Wellesley to Patriot Place"~ "2 Day",
`2023 Route...11` == "Wellesley to Bourne + Wellesley to Patriot Place"~ "2 Day",
`2023 Route...11` == "Wellesley to Bourne + Wellesley Century (2-Day)"~ "2 Day",
`2023 Route...11` == "Sturbridge to Bourne + Wellesley Century (2-Day)"~ "2 Day",
`2023 Route...11` == "Sturbridge to Bourne + Wellesley to Wellesley"~ "2 Day",
`2023 Route...11` == "Sturbridge to Bourne (1-Day, Sat)" ~ "1 Day",
`2023 Route...11` == "Wellesley to Bourne (1-Day, Sat)"~ "1 Day",
`2023 Route...11` == "Wellesley to Wellesley (50 mile Sunday)"~ "1 Day",
`2023 Route...11` == "Wellesley Century"~ "1 Day",
`2023 Route...11` == "Bourne to Provincetown Inn (1-Day, Sun)"~ "1 Day",
`2023 Route...11` == "Bourne to Provincetown Monument (1-Day, Sun)"~ "1 Day",
`2023 Route...11` == "Wellesley to Patriot Place (25 mile Sunday)"~ "1 Day",
`2023 Route...11` == "Wellesley to Wellesley Teens (50 mile Sunday)"~ "1 Day",
`2023 Route...11` == "Wellesley to Patriot Place Teens (25 mile Sun)"~ "1 Day",
TRUE ~ `2023 Route...11`
)) %>%
rename(eGIFTID = eGiftID)
#join the two sheets by location and select necessary fields
df_main <- df_rfid %>% left_join(df_waterstop, by = "Location In") %>%
select(PassingID, eGIFTID, `Bib (Tag)`, `Location In`, Location, time, Date, Hour)
#Correct NA values
mappings <- c(
"W09-out-Sat" = "Wrentham",
"W05-In" = "Wareham",
"WEL-out-Sun" = "Wellesley Sunday Start",
"W09-In-Sun" = "Wrentham",
"W09-Out-Sun" = "Wrentham"
)
#Cgabge Waterstop Codes to Location Names
df_main <- df_main %>%
mutate(Location = case_when(
`Location In` %in% names(mappings) ~ mappings[`Location In`],
TRUE ~ Location)) %>%
group_by(`Location In`, eGIFTID) %>%
filter(time == min(time)) %>% #Take our double counts of time. Will make the amount of riders more accurate
ungroup() %>%
mutate(`Location In` = case_when(   #rename code to the actual location name
`Location In`== "WEL-out-Sat" ~ "Wellesley Saturday Start",
`Location In`== "MMA-in"~ "Bourne Finish",
`Location In`== "W01-in"~ "Whitinsville In",
`Location In`=="W01-out"~ "Whitinsville Out",
`Location In`== "W02-in"~ "Franklin In",
`Location In`=="W02-out"~"Franklin Out",
`Location In`=="W03-in-Sat"~ "Dighton-Rehoboth In Saturday",
`Location In`== "W03-out-Sat"~ "Dighton-Rehoboth Out Saturday",
`Location In`== "W04-in"~ "Lakeville In",
`Location In` == "W04-out" ~ "Lakeville Out",
`Location In`== "W05-In"~"Wareham In",
`Location In`== "W05-out"~ "Wareham Out",
`Location In`== "W09-in-Sat"~"Wrentham in Saturday",
`Location In`== "W09-out-Sat" ~"Wrentham out Saturday",
`Location In`== "BB"~"Bourne Start",
`Location In`== "WEL-out-Sun"~ "Wellesley Sunday Start",
`Location In`== "WEL-in"~ "Wellesley Finish",
`Location In`== "PTI-In"~ "Provincetown Inn",
`Location In`== "FAM-in"~ "Provincetown Monuments (Family Finish)",
`Location In`== "W06-in"~ "Barnstable In",
`Location In`== "W06-out"~ "Barnstable Out",
`Location In`== "W07-in" ~ "Brewster In",
`Location In` == "W07-out"~ "Brewster Out",
`Location In`== "W08-in"~ "Wellfleet In",
`Location In`== "W08-out"~ "Wellfleet Out",
`Location In`== "W11-in"~ "Foxboro/Patriot Place",
`Location In`== "W12-in"~ "Medfield In",
`Location In`== "W12-out"~ "Medfield Out",
`Location In` == "W13-in"~ "Walpole In",
`Location In` == "W13-out"~ "Walpole Out",
`Location In`== "W15-In"~ "Taunton In",
`Location In` == "W15-Out" ~ "Taunton Out",
`Location In`== "W03-in-Sun"~"Dighton-Rehoboth in Sunday",
`Location In`== "W03-out-Sun"~"Dighton-Rehoboth out Sunday",
`Location In`== "W09-In-Sun"~ "Wrentham in Sunday",
`Location In`== "W09-Out-Sun"~ "Wrentham out Sunday",
TRUE ~`Location In`
)) %>%
select(-Location)
#Summarize by Location, hour and number of riders
summary_loc_hour_num <- df_main %>%
group_by(`Location In`, time, Hour) %>%
summarize(riders=n()) %>%
ungroup() %>%
group_by(`Location In`,time)
#Check a single rider
singleRider <- df_main %>%
filter(eGIFTID == "GB0030")
length(unique(df_main$eGIFTID))   #5264 On the road
length(unique(Rider_Route_Info$eGiftID))  #6541 Registered
first_rider_in <- df_main %>%
arrange(time) %>%
group_by(`Location In`) %>%
slice(1) %>%
ungroup() %>%
filter(!grepl("Out", `Location In`, ignore.case = TRUE))
last_rider_in <- df_main %>%
arrange(desc(time)) %>%
group_by(`Location In`) %>%
slice(1) %>%
ungroup() %>%
filter(!grepl("Out", `Location In`, ignore.case= TRUE))
last_rider_out <- df_main %>%
arrange(desc(time)) %>%
group_by(`Location In`) %>%
slice(1) %>%
ungroup() %>% filter(!grepl("In", `Location In`, ignore.case = TRUE))
peak_time <- df_main %>%
group_by(`Location In`) %>%
summarize(peak_riders = max(Hour)) %>%
arrange(desc(peak_riders))
peak_riders_time <- df_main %>%
group_by(`Location In`, Hour) %>% #might want to be more granular with the timing
summarize(peak_riders = max(n())) %>%
ungroup()
riders_at_each_stop <- df_main %>%
group_by(`Location In`) %>%
summarise(num_riders=n_distinct(eGIFTID))
View(riders_at_each_stop)
View(riders_at_each_stop)
library(readxl)
trackingdatapowerbi <- read_excel("~/GitHub/PMC/Tracking Data/data/trackingdatapowerbi.xlsx")
View(trackingdatapowerbi)
trackingdatapowerbi <- read_excel("~/GitHub/PMC/Tracking Data/data/trackingdatapowerbi.xlsx")
trackingdatapowerbi <- read_excel("~/GitHub/PMC/Tracking Data/data/trackingdatapowerbi.xlsx")
trackingdatapowerbi <- trackingdatapowerbi %>%
mutate(times_hms = hms(times),
times_rounded = as_hms(
floor_date()
))
library(tidyverse)
library(lubridate)
trackingdatapowerbi <- read_excel("~/GitHub/PMC/Tracking Data/data/trackingdatapowerbi.xlsx")
trackingdatapowerbi <- trackingdatapowerbi %>%
mutate(
times_hms = hms(EventTime),  # Convert to hms class
times_rounded = as_hms( # Convert back to desired format after rounding
floor_date(ymd_hms(paste("1970-01-01", times_hms)), unit = "5 minutes") -
ymd_hms("1970-01-01 00:00:00")
),
EventTime = format(as_datetime(times_rounded, origin = "1970-01-01"), format="%I:%M:%S %p")
) %>%
select(-times_hms, -times_rounded)  #
library(lubridate)
library(tidyverse)
library(lubridate)
trackingdatapowerbi <- read_excel("~/GitHub/PMC/Tracking Data/data/trackingdatapowerbi.xlsx")
library(readxl)
trackingdatapowerbi <- read_excel("~/GitHub/PMC/Tracking Data/data/trackingdatapowerbi.xlsx")
trackingdatapowerbi <- trackingdatapowerbi %>%
mutate(
times_hms = hms(EventTime),  # Convert to hms class
times_rounded = as_hms( # Convert back to desired format after rounding
floor_date(ymd_hms(paste("1970-01-01", times_hms)), unit = "5 minutes") -
ymd_hms("1970-01-01 00:00:00")
),
EventTime = format(as_datetime(times_rounded, origin = "1970-01-01"), format="%I:%M:%S %p")
) %>%
select(-times_hms, -times_rounded)  #
rlang::last_trace()
install.packages('hms')
install.packages("hms")
library(hms)
library(readxl)
trackingdatapowerbi <- read_excel("~/GitHub/PMC/Tracking Data/data/trackingdatapowerbi.xlsx")
trackingdatapowerbi <- trackingdatapowerbi %>%
mutate(
times_hms = hms(EventTime),  # Convert to hms class
times_rounded = as_hms( # Convert back to desired format after rounding
floor_date(ymd_hms(paste("1970-01-01", times_hms)), unit = "5 minutes") -
ymd_hms("1970-01-01 00:00:00")
),
EventTime = format(as_datetime(times_rounded, origin = "1970-01-01"), format="%I:%M:%S %p")
) %>%
select(-times_hms, -times_rounded)  #
